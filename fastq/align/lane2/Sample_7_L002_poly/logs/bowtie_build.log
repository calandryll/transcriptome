Settings:
  Output files: "/home/chris/transcriptome/fastq/align/Sample_7_L002_poly/tmp/segment_juncs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/chris/transcriptome/fastq/align/Sample_7_L002_poly/tmp/segment_juncs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 66075
Using parameters --bmax 49557 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 49557 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 5; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 29365.8 (target: 49556)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 13644
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13645
Getting block 2 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 37541
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 37542
Getting block 3 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 40419
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 40420
Getting block 4 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 10235
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 10236
Getting block 5 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 45403
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 45404
Getting block 6 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 44357
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 44358
Getting block 7 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 18387
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 18388
Getting block 8 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 32013
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 32014
Getting block 9 of 9
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 22293
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 22294
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 54492
fchr[G]: 132265
fchr[T]: 209961
fchr[$]: 264300
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4600285 bytes to primary EBWT file: /home/chris/transcriptome/fastq/align/Sample_7_L002_poly/tmp/segment_juncs.1.bt2
Wrote 66080 bytes to secondary EBWT file: /home/chris/transcriptome/fastq/align/Sample_7_L002_poly/tmp/segment_juncs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 264300
    bwtLen: 264301
    sz: 66075
    bwtSz: 66076
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 16519
    offsSz: 66076
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 1377
    numLines: 1377
    ebwtTotLen: 88128
    ebwtTotSz: 88128
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 66075
Using parameters --bmax 49557 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 49557 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 37756.3 (target: 49556)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 39778
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 39779
Getting block 2 of 7
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 45530
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 45531
Getting block 3 of 7
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 48261
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48262
Getting block 4 of 7
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 45924
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 45925
Getting block 5 of 7
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 26383
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 26384
Getting block 6 of 7
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 44330
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 44331
Getting block 7 of 7
  Reserving size (49557) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 14088
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 14089
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 54492
fchr[G]: 132265
fchr[T]: 209961
fchr[$]: 264300
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4600285 bytes to primary EBWT file: /home/chris/transcriptome/fastq/align/Sample_7_L002_poly/tmp/segment_juncs.rev.1.bt2
Wrote 66080 bytes to secondary EBWT file: /home/chris/transcriptome/fastq/align/Sample_7_L002_poly/tmp/segment_juncs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 264300
    bwtLen: 264301
    sz: 66075
    bwtSz: 66076
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 16519
    offsSz: 66076
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 1377
    numLines: 1377
    ebwtTotLen: 88128
    ebwtTotSz: 88128
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
